---
import FeatureTitle from "./FeatureTitle.astro";
import ServicesCard from "./ServicesCard.astro";
import Wrapper from "./Wrapper.astro";

const data = [
  {
    subheading: "Water Bores",
    image: "/images/leafcloseup.jpg",
    description:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do, Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do",
    svgPath:
      "M12.217 18.692q.223-.025.35-.15q.125-.127.125-.311q0-.216-.148-.332t-.363-.091q-1.025.075-2.29-.64q-1.266-.714-1.566-2.39q-.05-.236-.166-.353q-.117-.117-.295-.117q-.197 0-.335.147t-.083.44q.387 2.082 1.923 2.98t2.848.817M12 21q-3.002 0-5.001-2.061T5 13.8q0-2.154 1.738-4.765T12 3.308q3.525 3.117 5.262 5.728Q19 11.646 19 13.8q0 3.077-1.999 5.139T12 21",
  },
  {
    subheading: "Pumps",
    image: "/images/watertap.jpg",
    description:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do, Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do",
    svgPath:
      "m11.98 9.789l-.657.98q-.521.8-.672 1.16q-.151.362-.151.79q0 .616.434 1.054q.433.439 1.066.439t1.066-.434t.434-1.066q0-.4-.16-.79q-.161-.391-.682-1.153zm.018 8.038q-2.425 0-4.125-1.702t-1.7-4.127t1.702-4.125t4.127-1.7t4.125 1.702t1.7 4.127t-1.702 4.125t-4.127 1.7m8.502-6.558V10.5h-1.979q-.333-1.5-1.255-2.665Q16.344 6.672 15.017 6H20.5v-.77h1v6.04zm-18 7.5v-6.038h1v.769h1.979q.332 1.5 1.255 2.665q.922 1.164 2.249 1.835H3.5v.77z",
  },
  {
    subheading: "Filtration",
    image: "/images/filtration.jpg",
    description:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do, Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do",
    svgPath:
      "M11.77 19q-.33 0-.55-.22t-.22-.55v-5.576L5.604 5.83q-.202-.27-.055-.55t.47-.28h11.962q.323 0 .47.28q.147.282-.055.55L13 12.655v5.577q0 .328-.22.549t-.55.22z",
  },
  {
    subheading: "Irrigation",
    image: "/images/irrigation.jpg",
    description:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do, Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do",
    svgPath:
      "M9.127 21q-.546 0-.975-.338q-.429-.339-.585-.88l-1.027-4.05h10.923l-1.03 4.052q-.155.54-.584.878q-.429.339-.975.339zM12 8.673q.192-1.961 1.577-3.346t3.346-1.558q-.173 1.808-1.415 3.16T12.5 8.63V11h7.154v2.346q0 .671-.472 1.143t-1.143.472H6q-.671 0-1.143-.471q-.473-.473-.473-1.144V11H11.5V8.63q-1.766-.35-2.998-1.692T7.077 3.77q1.961.173 3.346 1.558T12 8.673",
  },
];
---

<!-- TODO 
 1. set up responsive layout with image
 2. add carousel of image which changes onclick of each card
 3. look to make widths responsive (see below) -->
<Wrapper section="services">
  <FeatureTitle title="Our Services" id="services" />
  <div class="services-layout">
    <div class="background-image" id="background-image"></div>

    <!-- Card section -->
    <div class="services-cards">
      {
        data.map((d, index) => (
          <button data-image={d.image} class="card" data-index={index}>
            <hr class="divider" />
            <div class="card-wrapper">
              <h3 class="subheading">{d.subheading}</h3>

              <div class="icon">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width={60}
                  height={60}
                  viewBox="0 0 24 24"
                >
                  <path d={d.svgPath} />
                </svg>
              </div>
              <div class="description">{d.description}</div>
            </div>
          </button>
        ))
      }
    </div>
    <!-- <ServicesCard changeBackground={changeBackground} /> -->
  </div>
</Wrapper>

<!-- TODO 
 1. Fixed widths on the tile is causing the wrapping issue
 2. Investigate using min/max autofill for the cards
 3. Reduce the padding of services - maybe remove global wrapper
 4. Try using React here and storing state to transition between images
 loop through all the tiles, remove the class that make it active -->

<style>
  :root {
    --image-transition-duration: 0.3s;
    --image-transition-timing: ease-in-out;
  }

  .services-layout {
    padding-block: 2rem;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    max-width: 1600px;
    margin-inline: auto;
  }

  #background-image {
    background-size: cover;
    width: 100%;
    max-width: 718px;
    justify-self: center;
    border-radius: 10px;
    background-position: center;
    position: relative;
    overflow: clip;
    transition: opacity var(--image-transition-duration)
      var(--image-transition-timing);
  }

  #background-image::before {
    content: "";
    background-image: var(--new-bg-image);
    background-size: cover;
    background-position: center;
    position: absolute;
    overflow: clip;
    inset: 0;
    opacity: 0;
    border-radius: 10px;
    transition: opacity var(--image-transition-duration)
      var(--image-transition-timing);
    z-index: 1;
  }

  #background-image.fading::before {
    opacity: 1;
  }

  /* Fading Effect */
  .fade-out {
    opacity: 0;
  }

  .fade-in {
    opacity: 1;
  }

  /* styles for the cards */
  .services-cards {
    display: grid;
    max-width: 800px;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin: 0 auto;
  }
  .card {
    align-items: flex-start;
    border: 1px solid transparent;
    border-radius: 8px;
    padding: 0rem 1rem 1rem 1rem;
    cursor: pointer;
    transition-property: background-color, visibility;
    transition-duration: var(--image-transition-duration);
    transition-timing-function: linear;
  }

  .divider {
    border: none;
    width: 100%;
    height: 4px;
    background-color: hsl(var(--color-navy));
    margin: 0px 0px 20px 0px;
    border-radius: 8px;
  }

  .subheading {
    font-size: 24px;
    font-weight: 700;
    text-transform: capitalize;
    letter-spacing: 0.025em;
  }

  .description {
    font-weight: 500;
    padding-top: 1rem;
    visibility: hidden;
    color: hsl(var(--color-off-white));
  }

  .card-active .description {
    visibility: visible;
  }

  .icon {
    padding: 1rem 0rem;
  }

  .card-wrapper {
    padding: 1rem;
  }

  .card-active {
    --color: var(--color-off-white);
    --background-color: var(--color-navy);

    background-color: hsl(var(--background-color));
    color: hsl(var(--color));
  }

  .card:focus-visible {
    outline: hsl(var(--color-navy)) solid 1px;
  }

  .icon path {
    fill: hsl(var(--color));
    transition-property: fill;
    transition-duration: var(--image-transition-duration);
    transition-timing-function: linear;
  }

  /* media queries */
  @media screen and (width <= 1500px) {
    .services-layout {
      grid-template-columns: 1fr;
      max-width: 700px;
      gap: 2rem;
      margin-inline: auto;
      height: auto;
    }
    #background-image {
      max-width: 100%;
      height: 400px;
    }
  }

  @media screen and (width <= 576px) {
    .services-layout {
      max-width: 320px;
      margin-inline: auto;
    }

    .services-cards {
      grid-template-columns: 1fr;
    }

    .background-image {
      display: none;
    }
  }
</style>

<script>
  const transitionDuration = 300;

  const imageContainer = document.getElementById("background-image");
  const cards = document.querySelectorAll<HTMLElement>(".card");

  let currentCardIndex = 0;

  if (cards && imageContainer) {
    imageContainer.style.backgroundImage = `url('${cards[currentCardIndex].dataset.image}')`;
    cards[currentCardIndex].classList.add("card-active");
  }

  let isTransitioning = false;

  async function changeBackground(newImageUrl: string): Promise<void> {
    if (!imageContainer) {
      console.error("Image container not found");
      return;
    }

    if (isTransitioning) {
      console.log("Transition already in progress, please wait.");
      return;
    }

    console.log(`Starting transition to: ${newImageUrl}`);
    isTransitioning = true;

    // 1. Set the new image on the ::before pseudo-element via CSS variable
    imageContainer.style.setProperty("--new-bg-image", `url('${newImageUrl}')`);

    // 2. Add the 'fading' class to trigger the opacity transition on ::before
    imageContainer.classList.add("fading");

    // 3. Wait for the transition to complete
    setTimeout(() => {
      console.log("Transition finished. Updating main background.");
      // 4. Set the container's actual background to the new image
      imageContainer.style.backgroundImage = `url('${newImageUrl}')`;

      // 5. Remove the 'fading' class to reset the ::before element's opacity
      imageContainer.classList.remove("fading");

      // 6. Allow new transitions
      isTransitioning = false;

      // Optional cleanup: remove the CSS variable when not needed
      // imageContainer.style.removeProperty('--new-bg-image');
    }, transitionDuration);
  }

  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll<HTMLElement>(".card").forEach((card) => {
      card.addEventListener("click", (event) => {
        const target = event.currentTarget as HTMLElement;
        const targetIndex = Number(target.dataset.index); // Get index from data attribute
        if (targetIndex === currentCardIndex) {
          return; // Ignore click if the same card is clicked
        }
        currentCardIndex = targetIndex;
        const newImageUrl = target.dataset.image; // Get image URL from data attribute

        document
          .querySelectorAll<HTMLElement>(".card")
          .forEach((card, index) => {
            if (index == targetIndex) {
              card.classList.add("card-active");
            } else {
              card.classList.remove("card-active");
            }
          });

        if (newImageUrl) {
          changeBackground(newImageUrl)
            .then(() => {
              console.log("Background changed successfully");
            })
            .catch((error) => {
              console.error("Error changing background:", error);
            });
        }
      });
    });
  });

  // Preload function
  function preloadImage(url: string) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => resolve(url);
      img.onerror = reject;
      img.src = url;
    });
  }

  // Preload all images
  function preloadAllImages() {
    return Promise.all(
      Array.from(cards)
        .map((card) => card.dataset.image)
        .map((imageSrc) => preloadImage(imageSrc as string))
    );
  }

  preloadAllImages()
    .then(() => {
      console.log("All images preloaded");
    })
    .catch((error) => {
      console.error("Error preloading images:", error);
    });
</script>
